import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

# LFSR32 Implementation (matching lfsr.h)
class LFSR32:
    def __init__(self, seed, tap_mask=0xA3000001):
        self.state = seed if seed != 0 else 0xACE1
        self.taps = tap_mask if tap_mask != 0 else 0xA3000001

    def step_bit(self):
        out = self.state & 1
        v = self.state & self.taps
        # Compute parity (fallback method)
        v ^= v >> 16
        v ^= v >> 8
        v ^= v >> 4
        v ^= v >> 2
        v ^= v >> 1
        fb = v & 1
        self.state = (self.state >> 1) | (fb << 31)
        return out

    def next_byte(self):
        b = 0
        for i in range(8):
            b |= (self.step_bit() << i)
        return b

# Prepare animation data
seed = 0xABCDEFFF
lfsr = LFSR32(seed)
num_bytes = 8

# Store step-by-step states for visualization
bit_states = []
byte_outputs = []
for _ in range(num_bytes):
    bits = []
    for _ in range(8):
        bits.append(lfsr.step_bit())
    byte_val = sum([b << i for i, b in enumerate(bits)])
    bit_states.append(bits)
    byte_outputs.append(byte_val)

# Animation setup
fig, axes = plt.subplots(1, 2, figsize=(8, 4))
ax_bits, ax_bytes = axes

ax_bits.set_title("LFSR Bits (LSB â†’ MSB)")
ax_bits.set_xlim(0, 8)
ax_bits.set_ylim(-0.5, 1.5)
bit_dots = ax_bits.plot([], [], 'o', color='tab:blue')[0]

ax_bytes.set_title("Generated Byte Values")
ax_bytes.set_xlim(-0.5, num_bytes - 0.5)
ax_bytes.set_ylim(0, 260)
bar_rects = ax_bytes.bar(range(num_bytes), [0]*num_bytes, color='tab:orange')

def init():
    bit_dots.set_data([], [])
    for rect in bar_rects:
        rect.set_height(0)
    return [bit_dots, *bar_rects]

def update(frame):
    # Show bits for this byte
    y = bit_states[frame]
    x = list(range(len(y)))
    bit_dots.set_data(x, y)

    # Update bars
    for i, rect in enumerate(bar_rects):
        if i <= frame:
            rect.set_height(byte_outputs[i])
    return [bit_dots, *bar_rects]

ani = animation.FuncAnimation(fig, update, frames=num_bytes, init_func=init,
                               blit=True, interval=800, repeat=False)

plt.show()  
